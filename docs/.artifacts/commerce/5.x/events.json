[
    {
        "class": "craft\\commerce\\Plugin",
        "name": "EVENT_BEFORE_SAVE_SETTINGS",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the plugin’s settings are saved."
    },
    {
        "class": "craft\\commerce\\Plugin",
        "name": "EVENT_AFTER_SAVE_SETTINGS",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the plugin’s settings are saved."
    },
    {
        "class": "craft\\commerce\\Plugin",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\Plugin",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_AFTER_DISCOUNT_ADJUSTMENTS_CREATED",
        "type": "craft\\commerce\\events\\DiscountAdjustmentsEvent",
        "desc": "The event that is triggered after a discount has matched the order and before it returns its adjustments."
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\adjusters\\Discount",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\adjusters\\Shipping",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\adjusters\\Shipping",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\adjusters\\Shipping",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\adjusters\\Shipping",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\adjusters\\Shipping",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\adjusters\\Shipping",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\adjusters\\Shipping",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\adjusters\\Tax",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\adjusters\\Tax",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\adjusters\\Tax",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\adjusters\\Tax",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\adjusters\\Tax",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\adjusters\\Tax",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\adjusters\\Tax",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\base\\Gateway",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\base\\InventoryMovement",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\base\\InventoryMovement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\base\\InventoryMovement",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\base\\InventoryMovement",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\InventoryMovement",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\InventoryMovement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\base\\InventoryMovement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\base\\Model",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\base\\Model",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\base\\Model",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\base\\Model",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Model",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Model",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\base\\Model",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\base\\Plan",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\base\\Plan",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\base\\Plan",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\base\\Plan",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Plan",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Plan",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\base\\Plan",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available bulk actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_DEFAULT_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the element’s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_ATTRIBUTE_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s HTML for table and card views.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_INLINE_ATTRIBUTE_INPUT_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s inline input HTML.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the element’s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_ADDITIONAL_BUTTONS",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining additional buttons that should be shown at the top of the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_ALT_ACTIONS",
        "type": "craft\\events\\DefineAltActionsEvent",
        "desc": "The event that is triggered when defining alternative form actions for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_ACTION_MENU_ITEMS",
        "type": "craft\\events\\DefineMenuItemsEvent",
        "desc": "The event that is triggered when defining action menu items..",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the element’s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AUTHORIZE_VIEW",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to view the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AUTHORIZE_SAVE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to save the element in its current state.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AUTHORIZE_CREATE_DRAFTS",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to create drafts for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AUTHORIZE_DUPLICATE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to duplicate the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AUTHORIZE_DELETE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AUTHORIZE_DELETE_FOR_SITE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element for its current site.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this element’s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the cache tags that should be cleared when this element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_BEFORE_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered before defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered when defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\Purchasable",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\base\\ShippingMethod",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\base\\ShippingMethod",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\base\\ShippingMethod",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\base\\ShippingMethod",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\ShippingMethod",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\ShippingMethod",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\base\\ShippingMethod",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\base\\SubscriptionGateway",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\base\\Zone",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\base\\Zone",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\base\\Zone",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\base\\Zone",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Zone",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\base\\Zone",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\base\\Zone",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\console\\Controller",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\commerce\\console\\Controller",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\console\\Controller",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\ExampleTemplatesController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\ExampleTemplatesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\ExampleTemplatesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\GatewaysController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\GatewaysController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\GatewaysController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\PricingCatalogController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\PricingCatalogController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\PricingCatalogController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\ResetDataController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\ResetDataController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\ResetDataController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\TransferCustomerDataController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\TransferCustomerDataController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\console\\controllers\\TransferCustomerDataController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseAdminController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\BaseAdminController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseAdminController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\BaseController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseCpController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\BaseCpController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseCpController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseFrontEndController",
        "name": "EVENT_MODIFY_CART_INFO",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when a cart is returned as an array for Ajax cart update requests."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseFrontEndController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\BaseFrontEndController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseFrontEndController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseShippingSettingsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\BaseShippingSettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseShippingSettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseStoreManagementController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\BaseStoreManagementController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseStoreManagementController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseTaxSettingsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\BaseTaxSettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\BaseTaxSettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\CartController",
        "name": "EVENT_MODIFY_CART_INFO",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when a cart is returned as an array for Ajax cart update requests."
    },
    {
        "class": "craft\\commerce\\controllers\\CartController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\CartController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\CartController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\CatalogPricingController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\CatalogPricingController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\CatalogPricingController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\CatalogPricingRulesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\CatalogPricingRulesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\CatalogPricingRulesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\DiscountsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\DiscountsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\DiscountsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\DonationsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\DonationsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\DonationsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\DownloadsController",
        "name": "EVENT_MODIFY_CART_INFO",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when a cart is returned as an array for Ajax cart update requests."
    },
    {
        "class": "craft\\commerce\\controllers\\DownloadsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\DownloadsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\DownloadsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\EmailPreviewController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\EmailPreviewController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\EmailPreviewController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\EmailsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\EmailsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\EmailsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\FormulasController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\FormulasController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\FormulasController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\GatewaysController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\GatewaysController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\GatewaysController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\InventoryController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\InventoryController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\InventoryController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\InventoryLocationsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\InventoryLocationsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\InventoryLocationsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\LineItemStatusesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\LineItemStatusesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\LineItemStatusesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\OrderSettingsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\OrderSettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\OrderSettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\OrderStatusesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\OrderStatusesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\OrderStatusesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\OrdersController",
        "name": "EVENT_MODIFY_PURCHASABLES_TABLE_QUERY",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when retrieving the purchasables for the add line item table on the order edit page."
    },
    {
        "class": "craft\\commerce\\controllers\\OrdersController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\OrdersController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\OrdersController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentCurrenciesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentCurrenciesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentCurrenciesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentSourcesController",
        "name": "EVENT_MODIFY_CART_INFO",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when a cart is returned as an array for Ajax cart update requests."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentSourcesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentSourcesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentSourcesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentsController",
        "name": "EVENT_MODIFY_CART_INFO",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when a cart is returned as an array for Ajax cart update requests."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\PaymentsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\PdfsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\PdfsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\PdfsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\PlansController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\PlansController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\PlansController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\ProductTypesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\ProductTypesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\ProductTypesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\ProductsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\ProductsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\ProductsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\PromotionsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\PromotionsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\PromotionsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\SalesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\SalesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\SalesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\SettingsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\SettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\SettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingCategoriesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingCategoriesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingCategoriesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingMethodsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingMethodsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingMethodsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingRulesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingRulesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingRulesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingZonesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingZonesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\ShippingZonesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\StoreManagementController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\StoreManagementController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\StoreManagementController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\StoresController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\StoresController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\StoresController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\SubscriptionsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\SubscriptionsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\SubscriptionsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\TaxCategoriesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\TaxCategoriesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\TaxCategoriesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\TaxRatesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\TaxRatesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\TaxRatesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\TaxZonesController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\TaxZonesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\TaxZonesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\TransfersController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\TransfersController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\TransfersController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\UserOrdersController",
        "name": "EVENT_MODIFY_CART_INFO",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when a cart is returned as an array for Ajax cart update requests."
    },
    {
        "class": "craft\\commerce\\controllers\\UserOrdersController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\UserOrdersController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\UserOrdersController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\UsersController",
        "name": "EVENT_MODIFY_CART_INFO",
        "type": "craft\\commerce\\controllers\\Event",
        "desc": "The event that’s triggered when a cart is returned as an array for Ajax cart update requests."
    },
    {
        "class": "craft\\commerce\\controllers\\UsersController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\UsersController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\UsersController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\VariantsController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\VariantsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\VariantsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\controllers\\WebhooksController",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\controllers\\WebhooksController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\commerce\\controllers\\WebhooksController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\commerce\\debug\\CommercePanel",
        "name": "EVENT_AFTER_DATA_PREPARE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the data for the panel is prepared."
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available bulk actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_DEFAULT_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the element’s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_ATTRIBUTE_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s HTML for table and card views.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_INLINE_ATTRIBUTE_INPUT_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s inline input HTML.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the element’s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_ADDITIONAL_BUTTONS",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining additional buttons that should be shown at the top of the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_ALT_ACTIONS",
        "type": "craft\\events\\DefineAltActionsEvent",
        "desc": "The event that is triggered when defining alternative form actions for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_ACTION_MENU_ITEMS",
        "type": "craft\\events\\DefineMenuItemsEvent",
        "desc": "The event that is triggered when defining action menu items..",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the element’s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AUTHORIZE_VIEW",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to view the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AUTHORIZE_SAVE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to save the element in its current state.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AUTHORIZE_CREATE_DRAFTS",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to create drafts for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AUTHORIZE_DUPLICATE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to duplicate the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AUTHORIZE_DELETE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AUTHORIZE_DELETE_FOR_SITE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element for its current site.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this element’s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the cache tags that should be cleared when this element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_BEFORE_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered before defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered when defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Donation",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_ADD_LINE_ITEM",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered before a new line item has been added to the order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_APPLY_ADD_LINE_ITEM",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after a line item has been added to an order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_ADD_LINE_ITEM",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after a line item has been added to an order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_REMOVE_LINE_ITEM",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after a line item has been removed from an order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_APPLY_REMOVE_LINE_ITEM",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after a line item has been removed from an order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_COMPLETE_ORDER",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered before an order is completed.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_COMPLETE_ORDER",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after an order is completed.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_ORDER_PAID",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after an order is paid and completed.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_ORDER_AUTHORIZED",
        "type": "yii\\base\\Event",
        "desc": "This event is raised after an order is authorized in full and completed",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_APPLY_ADD_NOTICE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered before a notice has been added to the order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_LINE_ITEMS_REFRESHED",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered before line items are refreshed during recalculation of an order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_LINE_ITEMS_REFRESHED",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after line items are refreshed during recalculation of an order.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available bulk actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_DEFAULT_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the element’s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_ATTRIBUTE_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s HTML for table and card views.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_INLINE_ATTRIBUTE_INPUT_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s inline input HTML.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the element’s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_ADDITIONAL_BUTTONS",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining additional buttons that should be shown at the top of the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_ALT_ACTIONS",
        "type": "craft\\events\\DefineAltActionsEvent",
        "desc": "The event that is triggered when defining alternative form actions for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_ACTION_MENU_ITEMS",
        "type": "craft\\events\\DefineMenuItemsEvent",
        "desc": "The event that is triggered when defining action menu items..",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the element’s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AUTHORIZE_VIEW",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to view the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AUTHORIZE_SAVE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to save the element in its current state.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AUTHORIZE_CREATE_DRAFTS",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to create drafts for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AUTHORIZE_DUPLICATE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to duplicate the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AUTHORIZE_DELETE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AUTHORIZE_DELETE_FOR_SITE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element for its current site.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this element’s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the cache tags that should be cleared when this element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered before defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered when defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Order",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_PARENT_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the parent selection criteria.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available bulk actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_DEFAULT_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the element’s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_ATTRIBUTE_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s HTML for table and card views.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_INLINE_ATTRIBUTE_INPUT_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s inline input HTML.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the element’s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_ADDITIONAL_BUTTONS",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining additional buttons that should be shown at the top of the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_ALT_ACTIONS",
        "type": "craft\\events\\DefineAltActionsEvent",
        "desc": "The event that is triggered when defining alternative form actions for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_ACTION_MENU_ITEMS",
        "type": "craft\\events\\DefineMenuItemsEvent",
        "desc": "The event that is triggered when defining action menu items..",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the element’s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AUTHORIZE_VIEW",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to view the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AUTHORIZE_SAVE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to save the element in its current state.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AUTHORIZE_CREATE_DRAFTS",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to create drafts for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AUTHORIZE_DUPLICATE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to duplicate the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AUTHORIZE_DELETE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AUTHORIZE_DELETE_FOR_SITE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element for its current site.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this element’s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the cache tags that should be cleared when this element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_BEFORE_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered before defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered when defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Product",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available bulk actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_DEFAULT_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the element’s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_ATTRIBUTE_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s HTML for table and card views.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_INLINE_ATTRIBUTE_INPUT_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s inline input HTML.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the element’s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_ADDITIONAL_BUTTONS",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining additional buttons that should be shown at the top of the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_ALT_ACTIONS",
        "type": "craft\\events\\DefineAltActionsEvent",
        "desc": "The event that is triggered when defining alternative form actions for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_ACTION_MENU_ITEMS",
        "type": "craft\\events\\DefineMenuItemsEvent",
        "desc": "The event that is triggered when defining action menu items..",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the element’s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AUTHORIZE_VIEW",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to view the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AUTHORIZE_SAVE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to save the element in its current state.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AUTHORIZE_CREATE_DRAFTS",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to create drafts for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AUTHORIZE_DUPLICATE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to duplicate the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AUTHORIZE_DELETE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AUTHORIZE_DELETE_FOR_SITE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element for its current site.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this element’s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the cache tags that should be cleared when this element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_BEFORE_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered before defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered when defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Subscription",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available bulk actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_DEFAULT_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the element’s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_ATTRIBUTE_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s HTML for table and card views.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_INLINE_ATTRIBUTE_INPUT_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s inline input HTML.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the element’s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_ADDITIONAL_BUTTONS",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining additional buttons that should be shown at the top of the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_ALT_ACTIONS",
        "type": "craft\\events\\DefineAltActionsEvent",
        "desc": "The event that is triggered when defining alternative form actions for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_ACTION_MENU_ITEMS",
        "type": "craft\\events\\DefineMenuItemsEvent",
        "desc": "The event that is triggered when defining action menu items..",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the element’s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AUTHORIZE_VIEW",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to view the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AUTHORIZE_SAVE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to save the element in its current state.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AUTHORIZE_CREATE_DRAFTS",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to create drafts for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AUTHORIZE_DUPLICATE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to duplicate the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AUTHORIZE_DELETE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AUTHORIZE_DELETE_FOR_SITE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element for its current site.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this element’s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the cache tags that should be cleared when this element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_BEFORE_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered before defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered when defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Transfer",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_CAPTURE_VARIANT_SNAPSHOT",
        "type": "craft\\commerce\\elements\\craft\\commerce\\events\\CustomizeVariantSnapshotFieldsEvent",
        "desc": "The event that is triggered before a variant’s field data is captured, which makes it possible to customize which fields are included in the snapshot. Custom fields are not included by default.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_CAPTURE_VARIANT_SNAPSHOT",
        "type": "craft\\commerce\\elements\\craft\\commerce\\events\\CustomizeVariantSnapshotDataEvent",
        "desc": "The event that is triggered after a variant’s field data is captured. This makes it possible to customize, extend, or redact the data to be persisted on the variant instance.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_CAPTURE_PRODUCT_SNAPSHOT",
        "type": "craft\\commerce\\elements\\craft\\commerce\\events\\CustomizeProductSnapshotFieldsEvent",
        "desc": "The event that is triggered before a product’s field data is captured. This makes it possible to customize which fields are included in the snapshot. Custom fields are not included by default.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_CAPTURE_PRODUCT_SNAPSHOT",
        "type": "craft\\commerce\\elements\\craft\\commerce\\events\\CustomizeProductSnapshotDataEvent",
        "desc": "The event that is triggered after a product’s field data is captured, which can be used to customize, extend, or redact the data to be persisted on the product instance.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available bulk actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_DEFAULT_CARD_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementCardAttributesEvent",
        "desc": "The event that is triggered when registering the card attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the element’s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_ATTRIBUTE_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s HTML for table and card views.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_INLINE_ATTRIBUTE_INPUT_HTML",
        "type": "craft\\events\\DefineAttributeHtmlEvent",
        "desc": "The event that is triggered when defining an attribute’s inline input HTML.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the element’s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_ADDITIONAL_BUTTONS",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining additional buttons that should be shown at the top of the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_ALT_ACTIONS",
        "type": "craft\\events\\DefineAltActionsEvent",
        "desc": "The event that is triggered when defining alternative form actions for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_ACTION_MENU_ITEMS",
        "type": "craft\\events\\DefineMenuItemsEvent",
        "desc": "The event that is triggered when defining action menu items..",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the editor sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the element’s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AUTHORIZE_VIEW",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to view the element’s edit page.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AUTHORIZE_SAVE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to save the element in its current state.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AUTHORIZE_CREATE_DRAFTS",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to create drafts for the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AUTHORIZE_DUPLICATE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to duplicate the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AUTHORIZE_DELETE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AUTHORIZE_DELETE_FOR_SITE",
        "type": "craft\\events\\AuthorizationCheckEvent",
        "desc": "The event that is triggered when determining whether a user is authorized to delete the element for its current site.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this element’s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the cache tags that should be cleared when this element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered before defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_URL",
        "type": "craft\\events\\DefineUrlEvent",
        "desc": "The event that is triggered when defining the element’s URL.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\Variant",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CopyLoadCartUrl",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateDiscount",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\CreateSale",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\DownloadOrderPdfAction",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\SetDefaultVariant",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\actions\\UpdateOrderStatus",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\DiscountAddressCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\PostalCodeFormulaConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\PostalCodeFormulaConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\PostalCodeFormulaConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\PostalCodeFormulaConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\PostalCodeFormulaConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\PostalCodeFormulaConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\PostalCodeFormulaConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\addresses\\ZoneAddressCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\CatalogPricingRuleCustomerCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\DiscountCustomerCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\HasOrdersConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\HasOrdersConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\HasOrdersConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\HasOrdersConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\HasOrdersConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\HasOrdersConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\HasOrdersConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\SignedInConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\SignedInConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\SignedInConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\SignedInConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\SignedInConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\SignedInConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\customers\\SignedInConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CompletedConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CompletedConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CompletedConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CompletedConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CompletedConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CompletedConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CompletedConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CouponCodeConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CouponCodeConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CouponCodeConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CouponCodeConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CouponCodeConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CouponCodeConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CouponCodeConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CustomerConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CustomerConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CustomerConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CustomerConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CustomerConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CustomerConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\CustomerConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DateOrderedConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DateOrderedConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DateOrderedConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DateOrderedConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DateOrderedConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DateOrderedConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DateOrderedConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountOrderCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountedItemSubtotalConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountedItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountedItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountedItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountedItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountedItemSubtotalConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\DiscountedItemSubtotalConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\HasPurchasableConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\HasPurchasableConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\HasPurchasableConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\HasPurchasableConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\HasPurchasableConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\HasPurchasableConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\HasPurchasableConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemSubtotalConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemSubtotalConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemSubtotalConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemSubtotalConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemTotalConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemTotalConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemTotalConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemTotalConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemTotalConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemTotalConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ItemTotalConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCurrencyValuesAttributeConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCurrencyValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCurrencyValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCurrencyValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCurrencyValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCurrencyValuesAttributeConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderCurrencyValuesAttributeConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderSiteConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderSiteConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderSiteConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderSiteConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderSiteConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderSiteConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderSiteConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderStatusConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderStatusConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderStatusConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderStatusConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderStatusConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderStatusConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderStatusConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderTextValuesAttributeConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderTextValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderTextValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderTextValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderTextValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderTextValuesAttributeConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderTextValuesAttributeConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderValuesAttributeConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderValuesAttributeConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderValuesAttributeConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\OrderValuesAttributeConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaidConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaidConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaidConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaidConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaidConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaidConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaidConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaymentGatewayConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaymentGatewayConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaymentGatewayConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaymentGatewayConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaymentGatewayConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaymentGatewayConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\PaymentGatewayConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ReferenceConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ReferenceConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ReferenceConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ReferenceConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ReferenceConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ReferenceConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ReferenceConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingAddressZoneConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingAddressZoneConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingAddressZoneConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingAddressZoneConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingAddressZoneConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingAddressZoneConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingAddressZoneConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingMethodOrderCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\ShippingRuleOrderCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalDiscountConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalDiscountConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalDiscountConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalDiscountConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalDiscountConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalDiscountConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalDiscountConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPaidConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPaidConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPaidConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPaidConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPaidConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPaidConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPaidConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPriceConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPriceConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPriceConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPriceConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPriceConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPriceConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalPriceConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalQtyConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalQtyConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalQtyConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalQtyConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalQtyConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalQtyConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalQtyConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalTaxConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalTaxConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalTaxConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalTaxConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalTaxConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalTaxConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalTaxConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalWeightConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalWeightConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalWeightConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalWeightConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalWeightConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalWeightConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\orders\\TotalWeightConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\CatalogPricingRuleProductCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductTypeConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductTypeConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductTypeConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductTypeConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductTypeConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductTypeConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductTypeConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantHasUnlimitedStockConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantHasUnlimitedStockConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantHasUnlimitedStockConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantHasUnlimitedStockConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantHasUnlimitedStockConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantHasUnlimitedStockConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantHasUnlimitedStockConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantInventoryTrackedConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantInventoryTrackedConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantInventoryTrackedConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantInventoryTrackedConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantInventoryTrackedConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantInventoryTrackedConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantInventoryTrackedConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantPriceConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantPriceConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantPriceConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantPriceConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantPriceConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantPriceConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantPriceConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSearchConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSearchConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSearchConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSearchConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSearchConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSearchConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSearchConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSkuConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSkuConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSkuConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSkuConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSkuConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSkuConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantSkuConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantStockConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantStockConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantStockConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantStockConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantStockConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantStockConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\products\\ProductVariantStockConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCustomerConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCustomerConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCustomerConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCustomerConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCustomerConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCustomerConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingCustomerConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingPurchasableConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingPurchasableConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingPurchasableConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingPurchasableConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingPurchasableConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingPurchasableConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingPurchasableConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCategoryConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCategoryConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCategoryConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCategoryConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCategoryConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCategoryConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCategoryConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\CatalogPricingRulePurchasableCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableTypeConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableTypeConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableTypeConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableTypeConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableTypeConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableTypeConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\PurchasableTypeConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\SkuConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\SkuConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\SkuConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\SkuConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\SkuConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\SkuConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\purchasables\\SkuConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\transfers\\TransferCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\users\\DiscountGroupConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\users\\DiscountGroupConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\users\\DiscountGroupConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\users\\DiscountGroupConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\users\\DiscountGroupConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\users\\DiscountGroupConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\users\\DiscountGroupConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\CatalogPricingRuleVariantCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\ProductConditionRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\ProductConditionRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\ProductConditionRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\ProductConditionRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\ProductConditionRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\ProductConditionRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\ProductConditionRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_REGISTER_CONDITION_RULES",
        "type": "craft\\events\\RegisterConditionRulesEvent",
        "desc": "The event that is triggered when defining the selectable condition rules."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\elements\\conditions\\variants\\VariantCondition",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "An event that is triggered when defining the cache tags that should be associated with the query."
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered before an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENTS",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\db\\DonationQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "An event that is triggered when defining the cache tags that should be associated with the query."
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered before an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENTS",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\db\\OrderQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "An event that is triggered when defining the cache tags that should be associated with the query."
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered before an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENTS",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\db\\ProductQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "An event that is triggered when defining the cache tags that should be associated with the query."
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered before an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENTS",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\db\\PurchasableQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "An event that is triggered when defining the cache tags that should be associated with the query."
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered before an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENTS",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\db\\SubscriptionQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "An event that is triggered when defining the cache tags that should be associated with the query."
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered before an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENTS",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\db\\TransferQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\events\\CancelableEvent",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_DEFINE_CACHE_TAGS",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "An event that is triggered when defining the cache tags that should be associated with the query."
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered before an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENTS",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\commerce\\elements\\db\\VariantQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\engines\\Tax",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\engines\\Tax",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\engines\\Tax",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\engines\\Tax",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\engines\\Tax",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\engines\\Tax",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\engines\\Tax",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\exports\\Expanded",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\exports\\Expanded",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\exports\\Expanded",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\exports\\Expanded",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\exports\\Expanded",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\exports\\Expanded",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\exports\\Expanded",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\exports\\LineItemExport",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\exports\\LineItemExport",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\exports\\LineItemExport",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\exports\\LineItemExport",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\exports\\LineItemExport",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\exports\\LineItemExport",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\exports\\LineItemExport",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\exports\\OrderExport",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\exports\\OrderExport",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\exports\\OrderExport",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\exports\\OrderExport",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\exports\\OrderExport",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\exports\\OrderExport",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\exports\\OrderExport",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\ProductTitleField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAllowedQtyField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableAvailableForPurchaseField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableDimensionsField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableFreeShippingField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePriceField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasablePromotableField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableSkuField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableStockField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\PurchasableWeightField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\TransferManagementField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\UserAddressSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantTitleField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_DEFINE_SHOW_IN_FORM",
        "type": "craft\\events\\DefineShowFieldLayoutComponentInFormEvent",
        "desc": "The event that is triggered when determining whether the component should be shown in a field layout."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fieldlayoutelements\\VariantsField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the field’s search keywords for an element."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the field’s input HTML."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_MERGE_INTO",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered after the field has been merged into another."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_MERGE_FROM",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered after another field has been merged into this one."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fields\\Products",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the field’s search keywords for an element."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the field’s input HTML."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_MERGE_INTO",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered after the field has been merged into another."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_MERGE_FROM",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered after another field has been merged into this one."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\fields\\Variants",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\gateways\\Dummy",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\gateways\\Manual",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\gateways\\MissingGateway",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\linktypes\\Product",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\migrations\\Install",
        "name": "EVENT_AFTER_UP",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is executed"
    },
    {
        "class": "craft\\commerce\\migrations\\Install",
        "name": "EVENT_AFTER_DOWN",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is reverted"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricing",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricing",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricing",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricing",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricing",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricing",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricing",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricingRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricingRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricingRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricingRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricingRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricingRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\CatalogPricingRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Coupon",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Coupon",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Coupon",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Coupon",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Coupon",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Coupon",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Coupon",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Discount",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Discount",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Discount",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Discount",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Discount",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Discount",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Discount",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Email",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Email",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Email",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Email",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Email",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Email",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Email",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\InventoryFulfillmentLevel",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\InventoryFulfillmentLevel",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\InventoryFulfillmentLevel",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\InventoryFulfillmentLevel",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryFulfillmentLevel",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryFulfillmentLevel",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\InventoryFulfillmentLevel",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\InventoryItem",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\InventoryItem",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\InventoryItem",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\InventoryItem",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryItem",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryItem",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\InventoryItem",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLevel",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLevel",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLevel",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLevel",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLevel",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLevel",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\InventoryLevel",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLocation",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLocation",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLocation",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLocation",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLocation",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryLocation",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\InventoryLocation",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\InventoryTransaction",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\InventoryTransaction",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\InventoryTransaction",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\InventoryTransaction",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryTransaction",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\InventoryTransaction",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\InventoryTransaction",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\LineItem",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\LineItem",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\LineItem",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\LineItem",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\LineItem",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\LineItem",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\LineItem",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\LineItemStatus",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\LineItemStatus",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\LineItemStatus",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\LineItemStatus",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\LineItemStatus",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\LineItemStatus",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\LineItemStatus",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\OrderAdjustment",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\OrderAdjustment",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\OrderAdjustment",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\OrderAdjustment",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderAdjustment",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderAdjustment",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\OrderAdjustment",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\OrderHistory",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\OrderHistory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\OrderHistory",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\OrderHistory",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderHistory",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderHistory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\OrderHistory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\OrderNotice",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\OrderNotice",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\OrderNotice",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\OrderNotice",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderNotice",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderNotice",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\OrderNotice",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\OrderStatus",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\OrderStatus",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\OrderStatus",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\OrderStatus",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderStatus",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\OrderStatus",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\OrderStatus",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\PaymentCurrency",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\PaymentCurrency",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\PaymentCurrency",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\PaymentCurrency",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\PaymentCurrency",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\PaymentCurrency",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\PaymentCurrency",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\PaymentSource",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\PaymentSource",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\PaymentSource",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\PaymentSource",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\PaymentSource",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\PaymentSource",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\PaymentSource",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Pdf",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Pdf",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Pdf",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Pdf",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Pdf",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Pdf",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Pdf",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ProductType",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ProductType",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ProductType",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ProductType",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ProductType",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ProductType",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ProductType",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ProductTypeSite",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ProductTypeSite",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ProductTypeSite",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ProductTypeSite",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ProductTypeSite",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ProductTypeSite",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ProductTypeSite",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\PurchasableStore",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\PurchasableStore",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\PurchasableStore",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\PurchasableStore",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\PurchasableStore",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\PurchasableStore",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\PurchasableStore",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Sale",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Sale",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Sale",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Sale",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Sale",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Sale",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Sale",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Settings",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Settings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Settings",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Settings",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Settings",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Settings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Settings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ShippingAddressZone",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ShippingAddressZone",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ShippingAddressZone",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ShippingAddressZone",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingAddressZone",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingAddressZone",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ShippingAddressZone",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ShippingCategory",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ShippingCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ShippingCategory",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ShippingCategory",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingCategory",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ShippingCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethod",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethod",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethod",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethod",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethod",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethod",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethod",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethodOption",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethodOption",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethodOption",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethodOption",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethodOption",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethodOption",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ShippingMethodOption",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRule",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRule",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRule",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRule",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ShippingRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRuleCategory",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRuleCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRuleCategory",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRuleCategory",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRuleCategory",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\ShippingRuleCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\ShippingRuleCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\SiteStore",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\SiteStore",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\SiteStore",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\SiteStore",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\SiteStore",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\SiteStore",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\SiteStore",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Store",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Store",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Store",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Store",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Store",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Store",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Store",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\StoreSettings",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\StoreSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\StoreSettings",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\StoreSettings",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\StoreSettings",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\StoreSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\StoreSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\TaxAddressZone",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\TaxAddressZone",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\TaxAddressZone",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\TaxAddressZone",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TaxAddressZone",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TaxAddressZone",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\TaxAddressZone",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\TaxCategory",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\TaxCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\TaxCategory",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\TaxCategory",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TaxCategory",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TaxCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\TaxCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\TaxRate",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\TaxRate",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\TaxRate",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\TaxRate",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TaxRate",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TaxRate",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\TaxRate",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\Transaction",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\Transaction",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\Transaction",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\Transaction",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Transaction",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\Transaction",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\Transaction",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\TransferDetail",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\TransferDetail",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\TransferDetail",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\TransferDetail",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TransferDetail",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\TransferDetail",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\TransferDetail",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\DeactivateInventoryLocation",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\DeactivateInventoryLocation",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\DeactivateInventoryLocation",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\DeactivateInventoryLocation",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\DeactivateInventoryLocation",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\DeactivateInventoryLocation",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\DeactivateInventoryLocation",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryCommittedMovement",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryCommittedMovement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryCommittedMovement",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryCommittedMovement",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryCommittedMovement",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryCommittedMovement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryCommittedMovement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryFulfillMovement",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryFulfillMovement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryFulfillMovement",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryFulfillMovement",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryFulfillMovement",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryFulfillMovement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryFulfillMovement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryLocationDeactivatedMovement",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryLocationDeactivatedMovement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryLocationDeactivatedMovement",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryLocationDeactivatedMovement",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryLocationDeactivatedMovement",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryLocationDeactivatedMovement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryLocationDeactivatedMovement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryManualMovement",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryManualMovement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryManualMovement",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryManualMovement",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryManualMovement",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryManualMovement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryManualMovement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryRestockMovement",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryRestockMovement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryRestockMovement",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryRestockMovement",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryRestockMovement",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryRestockMovement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryRestockMovement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryTransferMovement",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryTransferMovement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryTransferMovement",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryTransferMovement",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryTransferMovement",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryTransferMovement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\InventoryTransferMovement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevel",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevel",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevel",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevel",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevel",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevel",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevel",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevelInTransfer",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevelInTransfer",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevelInTransfer",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevelInTransfer",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevelInTransfer",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevelInTransfer",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\inventory\\UpdateInventoryLevelInTransfer",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\payments\\BasePaymentForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\payments\\BasePaymentForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\payments\\BasePaymentForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\payments\\BasePaymentForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\BasePaymentForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\BasePaymentForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\payments\\BasePaymentForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\payments\\CreditCardPaymentForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\payments\\CreditCardPaymentForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\payments\\CreditCardPaymentForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\payments\\CreditCardPaymentForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\CreditCardPaymentForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\CreditCardPaymentForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\payments\\CreditCardPaymentForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\payments\\DummyPaymentForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\payments\\DummyPaymentForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\payments\\DummyPaymentForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\payments\\DummyPaymentForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\DummyPaymentForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\DummyPaymentForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\payments\\DummyPaymentForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\payments\\OffsitePaymentForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\payments\\OffsitePaymentForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\payments\\OffsitePaymentForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\payments\\OffsitePaymentForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\OffsitePaymentForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\payments\\OffsitePaymentForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\payments\\OffsitePaymentForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\CancelSubscriptionForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\CancelSubscriptionForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\CancelSubscriptionForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\CancelSubscriptionForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\CancelSubscriptionForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\CancelSubscriptionForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\CancelSubscriptionForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\DummyPlan",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\DummyPlan",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\DummyPlan",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\DummyPlan",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\DummyPlan",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\DummyPlan",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\DummyPlan",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionPayment",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionPayment",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionPayment",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionPayment",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionPayment",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionPayment",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SubscriptionPayment",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SwitchPlansForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SwitchPlansForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SwitchPlansForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SwitchPlansForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SwitchPlansForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SwitchPlansForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\models\\subscriptions\\SwitchPlansForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricing",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\CatalogPricingRuleUser",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Coupon",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Customer",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\CustomerDiscountUse",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Discount",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\DiscountCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\DiscountPurchasable",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Donation",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Email",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\EmailDiscountUse",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Gateway",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\InventoryItem",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\InventoryLocation",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\LineItem",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\LineItemStatus",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Order",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\OrderAdjustment",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\OrderHistory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\OrderNotice",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatus",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\OrderStatusEmail",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\PaymentCurrency",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\PaymentSource",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Pdf",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Plan",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Product",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ProductType",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeShippingCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeSite",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ProductTypeTaxCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Purchasable",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\PurchasableStore",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Sale",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\SaleCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\SalePurchasable",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\SaleUserGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ShippingCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ShippingMethod",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRule",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ShippingRuleCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\ShippingZone",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\SiteStore",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Store",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\StoreSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Subscription",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\TaxCategory",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\TaxRate",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\TaxZone",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Transaction",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Transfer",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\TransferDetail",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\records\\Variant",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\services\\Carts",
        "name": "EVENT_BEFORE_PURGE_INACTIVE_CARTS",
        "type": "craft\\commerce\\events\\CartPurgeEvent",
        "desc": "The event that is triggered before the carts are purged."
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_UPDATE_PRIMARY_PAYMENT_SOURCE",
        "type": "craft\\commerce\\events\\UpdatePrimaryPaymentSourceEvent",
        "desc": "The event that is triggered when a primary payment method is saved."
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\services\\Customers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\services\\Discounts",
        "name": "EVENT_BEFORE_SAVE_DISCOUNT",
        "type": "craft\\commerce\\events\\DiscountEvent",
        "desc": "The event that is triggered before a discount is saved."
    },
    {
        "class": "craft\\commerce\\services\\Discounts",
        "name": "EVENT_AFTER_SAVE_DISCOUNT",
        "type": "craft\\commerce\\events\\DiscountEvent",
        "desc": "The event that is triggered after a discount is saved."
    },
    {
        "class": "craft\\commerce\\services\\Discounts",
        "name": "EVENT_AFTER_DELETE_DISCOUNT",
        "type": "craft\\commerce\\events\\DiscountEvent",
        "desc": "The event that is triggered after a discount is deleted."
    },
    {
        "class": "craft\\commerce\\services\\Discounts",
        "name": "EVENT_DISCOUNT_MATCHES_LINE_ITEM",
        "type": "craft\\commerce\\events\\MatchLineItemEvent",
        "desc": "The event that is triggered when a line item is matched with a discount."
    },
    {
        "class": "craft\\commerce\\services\\Discounts",
        "name": "EVENT_DISCOUNT_MATCHES_ORDER",
        "type": "craft\\commerce\\events\\MatchOrderEvent",
        "desc": "The event that is triggered when an order is matched with a discount."
    },
    {
        "class": "craft\\commerce\\services\\Emails",
        "name": "EVENT_BEFORE_SEND_MAIL",
        "type": "craft\\commerce\\events\\MailEvent",
        "desc": "The event that is raised before an email is sent. You may set `MailEvent::isValid` to `false` to prevent the email from being sent."
    },
    {
        "class": "craft\\commerce\\services\\Emails",
        "name": "EVENT_AFTER_SEND_MAIL",
        "type": "craft\\commerce\\events\\MailEvent",
        "desc": "The event that is raised after an email is sent"
    },
    {
        "class": "craft\\commerce\\services\\Emails",
        "name": "EVENT_BEFORE_SAVE_EMAIL",
        "type": "craft\\commerce\\events\\EmailEvent",
        "desc": "The event that is triggered before an email is saved."
    },
    {
        "class": "craft\\commerce\\services\\Emails",
        "name": "EVENT_AFTER_SAVE_EMAIL",
        "type": "craft\\commerce\\events\\EmailEvent",
        "desc": "The event that is triggered after an email is saved."
    },
    {
        "class": "craft\\commerce\\services\\Emails",
        "name": "EVENT_BEFORE_DELETE_EMAIL",
        "type": "craft\\commerce\\events\\EmailEvent",
        "desc": "The event that is triggered before an email is deleted."
    },
    {
        "class": "craft\\commerce\\services\\Emails",
        "name": "EVENT_AFTER_DELETE_EMAIL",
        "type": "craft\\commerce\\events\\EmailEvent",
        "desc": "The event that is triggered after an email is deleted. ```php use craft\\commerce\\events\\EmailEvent; use craft\\commerce\\services\\Emails; use craft\\commerce\\models\\Email; use yii\\base\\Event;"
    },
    {
        "class": "craft\\commerce\\services\\Formulas",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\services\\Formulas",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\services\\Formulas",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\services\\Formulas",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\Formulas",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\Formulas",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\services\\Formulas",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\services\\Gateways",
        "name": "EVENT_REGISTER_GATEWAY_TYPES",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered for the registration of additional gateways."
    },
    {
        "class": "craft\\commerce\\services\\LineItemStatuses",
        "name": "EVENT_DEFAULT_LINE_ITEM_STATUS",
        "type": "craft\\commerce\\events\\DefaultLineItemStatusEvent",
        "desc": "The event that is triggered when getting a default status for a line item. You may set `DefaultLineItemStatusEvent::lineItemStatus` to a desired LineItemStatus to override the default status set in control panel."
    },
    {
        "class": "craft\\commerce\\services\\LineItems",
        "name": "EVENT_BEFORE_SAVE_LINE_ITEM",
        "type": "craft\\commerce\\events\\LineItemEvent",
        "desc": "The event that is triggered before a line item is saved."
    },
    {
        "class": "craft\\commerce\\services\\LineItems",
        "name": "EVENT_AFTER_SAVE_LINE_ITEM",
        "type": "craft\\commerce\\events\\LineItemEvent",
        "desc": "The event that is triggered after a line item is saved."
    },
    {
        "class": "craft\\commerce\\services\\LineItems",
        "name": "EVENT_CREATE_LINE_ITEM",
        "type": "craft\\commerce\\events\\LineItemEvent",
        "desc": "The event that is triggered after a line item has been created from a purchasable."
    },
    {
        "class": "craft\\commerce\\services\\LineItems",
        "name": "EVENT_POPULATE_LINE_ITEM",
        "type": "craft\\commerce\\events\\LineItemEvent",
        "desc": "The event that is triggered as a line item is being populated from a purchasable."
    },
    {
        "class": "craft\\commerce\\services\\OrderAdjustments",
        "name": "EVENT_REGISTER_ORDER_ADJUSTERS",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered for registration of additional adjusters."
    },
    {
        "class": "craft\\commerce\\services\\OrderAdjustments",
        "name": "EVENT_REGISTER_DISCOUNT_ADJUSTERS",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered for registration of additional adjusters."
    },
    {
        "class": "craft\\commerce\\services\\OrderHistories",
        "name": "EVENT_ORDER_STATUS_CHANGE",
        "type": "craft\\commerce\\events\\OrderStatusEvent",
        "desc": "The event that is triggered when an order status is changed."
    },
    {
        "class": "craft\\commerce\\services\\OrderNotices",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\services\\OrderNotices",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\services\\OrderNotices",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\services\\OrderNotices",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\OrderNotices",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\OrderNotices",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\services\\OrderNotices",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\services\\OrderStatuses",
        "name": "EVENT_DEFAULT_ORDER_STATUS",
        "type": "craft\\commerce\\events\\DefaultOrderStatusEvent",
        "desc": "The event that is triggered when a default order status is being fetched."
    },
    {
        "class": "craft\\commerce\\services\\OrderStatuses",
        "name": "EVENT_ORDER_STATUS_CHANGE_EMAILS",
        "type": "craft\\commerce\\events\\OrderStatusEmailsEvent",
        "desc": "The email event that is triggered when an order status is changed."
    },
    {
        "class": "craft\\commerce\\services\\PaymentSources",
        "name": "EVENT_DELETE_PAYMENT_SOURCE",
        "type": "craft\\commerce\\events\\PaymentSourceEvent",
        "desc": "The event that is triggered when a payment source is deleted."
    },
    {
        "class": "craft\\commerce\\services\\PaymentSources",
        "name": "EVENT_BEFORE_SAVE_PAYMENT_SOURCE",
        "type": "craft\\commerce\\events\\PaymentSourceEvent",
        "desc": "The event that is triggered before a payment source is added."
    },
    {
        "class": "craft\\commerce\\services\\PaymentSources",
        "name": "EVENT_AFTER_SAVE_PAYMENT_SOURCE",
        "type": "craft\\commerce\\events\\PaymentSourceEvent",
        "desc": "The event that is triggered after a payment source is added."
    },
    {
        "class": "craft\\commerce\\services\\Payments",
        "name": "EVENT_AFTER_COMPLETE_PAYMENT",
        "type": "craft\\commerce\\events\\TransactionEvent",
        "desc": "The event that is triggered when a complete-payment request is made. After this event, the customer will be redirected offsite or be redirected to the order success returnUrl."
    },
    {
        "class": "craft\\commerce\\services\\Payments",
        "name": "EVENT_BEFORE_CAPTURE_TRANSACTION",
        "type": "craft\\commerce\\events\\TransactionEvent",
        "desc": "The event that is triggered before a payment transaction is captured."
    },
    {
        "class": "craft\\commerce\\services\\Payments",
        "name": "EVENT_AFTER_CAPTURE_TRANSACTION",
        "type": "craft\\commerce\\events\\TransactionEvent",
        "desc": "The event that is triggered after a payment transaction is captured."
    },
    {
        "class": "craft\\commerce\\services\\Payments",
        "name": "EVENT_BEFORE_REFUND_TRANSACTION",
        "type": "craft\\commerce\\events\\TransactionEvent",
        "desc": "The event that is triggered before a transaction is refunded."
    },
    {
        "class": "craft\\commerce\\services\\Payments",
        "name": "EVENT_AFTER_REFUND_TRANSACTION",
        "type": "craft\\commerce\\events\\TransactionEvent",
        "desc": "The event that is triggered after a transaction is refunded."
    },
    {
        "class": "craft\\commerce\\services\\Payments",
        "name": "EVENT_BEFORE_PROCESS_PAYMENT",
        "type": "craft\\commerce\\events\\ProcessPaymentEvent",
        "desc": "The event that is triggered before a payment is processed."
    },
    {
        "class": "craft\\commerce\\services\\Payments",
        "name": "EVENT_AFTER_PROCESS_PAYMENT",
        "type": "craft\\commerce\\events\\ProcessPaymentEvent",
        "desc": "The event that is triggered after a payment is processed."
    },
    {
        "class": "craft\\commerce\\services\\Pdfs",
        "name": "EVENT_BEFORE_SAVE_PDF",
        "type": "craft\\commerce\\events\\PdfEvent",
        "desc": "The event that is triggered before an pdf is saved."
    },
    {
        "class": "craft\\commerce\\services\\Pdfs",
        "name": "EVENT_AFTER_SAVE_PDF",
        "type": "craft\\commerce\\events\\PdfEvent",
        "desc": "The event that is triggered after an PDF is saved."
    },
    {
        "class": "craft\\commerce\\services\\Pdfs",
        "name": "EVENT_BEFORE_RENDER_PDF",
        "type": "craft\\commerce\\events\\PdfRenderEvent",
        "desc": "The event that is triggered before an order’s PDF is rendered."
    },
    {
        "class": "craft\\commerce\\services\\Pdfs",
        "name": "EVENT_AFTER_RENDER_PDF",
        "type": "craft\\commerce\\events\\PdfRenderEvent",
        "desc": "The event that is triggered after an order’s PDF has been rendered."
    },
    {
        "class": "craft\\commerce\\services\\Pdfs",
        "name": "EVENT_MODIFY_RENDER_OPTIONS",
        "type": "craft\\commerce\\events\\PdfRenderOptionsEvent",
        "desc": "The event that allows additional setting of pdf render options."
    },
    {
        "class": "craft\\commerce\\services\\Pdfs",
        "name": "EVENT_BEFORE_DELETE_PDF",
        "type": "craft\\commerce\\events\\PdfEvent",
        "desc": "The event that is triggered before a pdf is deleted."
    },
    {
        "class": "craft\\commerce\\services\\Plans",
        "name": "EVENT_ARCHIVE_PLAN",
        "type": "craft\\commerce\\events\\PlanEvent",
        "desc": "The event that is triggered when a plan is archived."
    },
    {
        "class": "craft\\commerce\\services\\Plans",
        "name": "EVENT_BEFORE_SAVE_PLAN",
        "type": "craft\\commerce\\events\\PlanEvent",
        "desc": "The event that is triggered before a plan is saved."
    },
    {
        "class": "craft\\commerce\\services\\Plans",
        "name": "EVENT_AFTER_SAVE_PLAN",
        "type": "craft\\commerce\\events\\PlanEvent",
        "desc": "The event that is triggered after a plan is saved."
    },
    {
        "class": "craft\\commerce\\services\\ProductTypes",
        "name": "EVENT_BEFORE_SAVE_PRODUCTTYPE",
        "type": "craft\\commerce\\events\\ProductTypeEvent",
        "desc": "The event that is triggered before a product type is saved."
    },
    {
        "class": "craft\\commerce\\services\\ProductTypes",
        "name": "EVENT_AFTER_SAVE_PRODUCTTYPE",
        "type": "craft\\commerce\\events\\ProductTypeEvent",
        "desc": "The event that is triggered after a product type has been saved."
    },
    {
        "class": "craft\\commerce\\services\\Purchasables",
        "name": "EVENT_PURCHASABLE_OUT_OF_STOCK_PURCHASES_ALLOWED",
        "type": "craft\\commerce\\events\\PurchasableOutOfStockPurchasesAllowedEvent",
        "desc": "The event that is triggered when checking if the purchasable can be purchased when out of stock."
    },
    {
        "class": "craft\\commerce\\services\\Purchasables",
        "name": "EVENT_PURCHASABLE_AVAILABLE",
        "type": "craft\\commerce\\events\\PurchasableAvailableEvent",
        "desc": "The event that is triggered when the availability of a purchasables is checked."
    },
    {
        "class": "craft\\commerce\\services\\Purchasables",
        "name": "EVENT_PURCHASABLE_SHIPPABLE",
        "type": "craft\\commerce\\events\\PurchasableShippableEvent",
        "desc": "The event that is triggered when determining whether a purchasable may be shipped."
    },
    {
        "class": "craft\\commerce\\services\\Purchasables",
        "name": "EVENT_REGISTER_PURCHASABLE_ELEMENT_TYPES",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered for registration of additional purchasables."
    },
    {
        "class": "craft\\commerce\\services\\Sales",
        "name": "EVENT_BEFORE_MATCH_PURCHASABLE_SALE",
        "type": "craft\\commerce\\events\\SaleMatchEvent",
        "desc": "The event that is triggered before Commerce attempts to match a sale to a purchasable."
    },
    {
        "class": "craft\\commerce\\services\\Sales",
        "name": "EVENT_BEFORE_SAVE_SALE",
        "type": "craft\\commerce\\events\\SaleEvent",
        "desc": "The event that is triggered before a sale is saved."
    },
    {
        "class": "craft\\commerce\\services\\Sales",
        "name": "EVENT_AFTER_SAVE_SALE",
        "type": "craft\\commerce\\events\\SaleEvent",
        "desc": "The event that is triggered after a sale is saved."
    },
    {
        "class": "craft\\commerce\\services\\Sales",
        "name": "EVENT_AFTER_DELETE_SALE",
        "type": "craft\\commerce\\events\\SaleEvent",
        "desc": "The event that is triggered after a sale is deleted."
    },
    {
        "class": "craft\\commerce\\services\\ShippingMethods",
        "name": "EVENT_REGISTER_AVAILABLE_SHIPPING_METHODS",
        "type": "craft\\commerce\\services\\RegisterShippingMethods",
        "desc": "The event that is triggered for registration of additional shipping methods."
    },
    {
        "class": "craft\\commerce\\services\\Stores",
        "name": "EVENT_BEFORE_DELETE_STORE",
        "type": "craft\\commerce\\events\\DeleteStoreEvent",
        "desc": "The event that is triggered before a store is deleted."
    },
    {
        "class": "craft\\commerce\\services\\Stores",
        "name": "EVENT_AFTER_DELETE_STORE",
        "type": "craft\\commerce\\events\\DeleteStoreEvent",
        "desc": "The event that is triggered after a store is deleted"
    },
    {
        "class": "craft\\commerce\\services\\Stores",
        "name": "EVENT_BEFORE_APPLY_STORE_DELETE",
        "type": "craft\\commerce\\events\\DeleteStoreEvent",
        "desc": "The event that is triggered before a store delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\services\\Stores",
        "name": "EVENT_BEFORE_SAVE_STORE",
        "type": "craft\\commerce\\events\\StoreEvent",
        "desc": "The event that is triggered before a store is saved."
    },
    {
        "class": "craft\\commerce\\services\\Stores",
        "name": "EVENT_AFTER_SAVE_STORE",
        "type": "craft\\commerce\\events\\StoreEvent",
        "desc": "The event that is triggered after a store is saved."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_AFTER_EXPIRE_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\SubscriptionEvent",
        "desc": "The event that is triggered after a subscription has expired."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_BEFORE_CREATE_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\CreateSubscriptionEvent",
        "desc": "The event that is triggered before a subscription is created."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_AFTER_CREATE_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\SubscriptionEvent",
        "desc": "The event that is triggered after a subscription is created."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_BEFORE_REACTIVATE_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\SubscriptionEvent",
        "desc": "TThe event that is triggered before a subscription gets reactivated."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_AFTER_REACTIVATE_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\SubscriptionEvent",
        "desc": "The event that is triggered after a subscription gets reactivated."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_BEFORE_SWITCH_SUBSCRIPTION_PLAN",
        "type": "craft\\commerce\\events\\SubscriptionSwitchPlansEvent",
        "desc": "The event that is triggered before a subscription is switched to a different plan."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_AFTER_SWITCH_SUBSCRIPTION_PLAN",
        "type": "craft\\commerce\\events\\SubscriptionSwitchPlansEvent",
        "desc": "The event that is triggered after a subscription gets switched to a different plan."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_BEFORE_CANCEL_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\CancelSubscriptionEvent",
        "desc": "The event that is triggered before a subscription is canceled."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_AFTER_CANCEL_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\CancelSubscriptionEvent",
        "desc": "The event that is triggered after a subscription gets canceled."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_BEFORE_UPDATE_SUBSCRIPTION",
        "type": "craft\\commerce\\events\\SubscriptionEvent",
        "desc": "The event that is triggered before a subscription gets updated. Typically this event is fired when subscription data is updated on the gateway."
    },
    {
        "class": "craft\\commerce\\services\\Subscriptions",
        "name": "EVENT_RECEIVE_SUBSCRIPTION_PAYMENT",
        "type": "craft\\commerce\\events\\SubscriptionPaymentEvent",
        "desc": "The event that is triggered when a subscription payment is received."
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_REGISTER_TAX_ID_VALIDATORS",
        "type": "craft\\commerce\\events\\TaxIdValidatorsEvent",
        "desc": "The event that is raised when tax ID validators are registered."
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_REGISTER_TAX_ENGINE",
        "type": "craft\\commerce\\events\\TaxEngineEvent",
        "desc": "The event that is triggered when determining the tax engine."
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\services\\Taxes",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\services\\Transactions",
        "name": "EVENT_AFTER_SAVE_TRANSACTION",
        "type": "craft\\commerce\\events\\TransactionEvent",
        "desc": "The event that is triggered after a transaction has been saved."
    },
    {
        "class": "craft\\commerce\\services\\Transactions",
        "name": "EVENT_AFTER_CREATE_TRANSACTION",
        "type": "craft\\commerce\\events\\TransactionEvent",
        "desc": "The event that is triggered after a transaction has been created."
    },
    {
        "class": "craft\\commerce\\services\\Webhooks",
        "name": "EVENT_BEFORE_PROCESS_WEBHOOK",
        "type": "craft\\commerce\\events\\WebhookEvent",
        "desc": "The event that is triggered before a Webhook is processed."
    },
    {
        "class": "craft\\commerce\\services\\Webhooks",
        "name": "EVENT_AFTER_PROCESS_WEBHOOK",
        "type": "craft\\commerce\\events\\WebhookEvent",
        "desc": "The event that is triggered after a Webhook is processed."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\AverageOrderTotal",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\NewCustomers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\Orders",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\RepeatCustomers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\TopCustomers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProductTypes",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\TopProducts",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\TopPurchasables",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrders",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalOrdersByCountry",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the component’s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\commerce\\widgets\\TotalRevenue",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    }
]